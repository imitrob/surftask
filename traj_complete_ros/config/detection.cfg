#!/usr/bin/env python
PACKAGE = "traj_complete_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("bilateral_filter_size",    int_t,    0, "Size of bilateral filter (larger numbers results in slightly slower processing time).", 9,  1, 20)
gen.add("bilateral_sigma_color",    int_t,    0, "Magical bilateral filter parameter. See OpenCV documentation for help. Best to set to the same value as the other magical parameter,", 30,  1, 300)
gen.add("bilateral_sigma_space",    int_t,    0, "Magical bilateral filter parameter. See OpenCV documentation for help. Best to set to the same value as the other magical parameter,", 30,  1, 300)

gen.add("auto_canny_sigma", double_t, 0, "Magical parameter for Canny filter. Larger values will cause to include more edges.",   0.7, 0.0,   10)

gen.add("use_graph_cut", bool_t, 0, "Whether to use graph cut FGR segmentation to estimate the contours.",    False)
gen.add("min_contour_len", int_t, 0, "Minimal length of a contour to be accepted.", 200, 10, 1000)
gen.add("contour_approximation_delta", double_t, 0, "Parameter for contour simplifications as a percent of contour length. Larger values will result in more simplificaion.",    0.001, 0.0001,   0.01)

gen.add("use_convex_fill_poly", bool_t, 0, "Whether to use convex or general polygon filling procedure when creating mask from contours",    True)
gen.add("use_convex_hull", bool_t, 0, "Whether replace contours with their convex hull (smoother but does not work for non-convex shapes).",    False)

gen.add("mask_closing_iterations",    int_t,    0, "Larger values will close larger gaps in contours.", 7,  0, 50)
gen.add("mask_opening_iterations",    int_t,    0, "Larger values will remove 'stubs' protruding from contours but values that are too large will remove contours altogether.", 0,  0, 50)
gen.add("mask_kernel",    int_t,    0, "Kernel size of the mask open/close operations. Will enhance both open and close effects", 5,  1, 21)

gen.add("blur_size",    int_t,    0, "(PCD) Gaussian blur kernel size", 11,  1, 50)
gen.add("blur_sigma", double_t, 0, "(PCD) Gaussian blur sigma",    5.0, 0.0,   50)

gen.add("morph_kernel",    int_t,    0, "(PCD) Kernel size for morphological open operations (removes small noise areas).", 3,  1, 20)

exit(gen.generate(PACKAGE, "detector_node", "Detection"))